<?php
defined('BASEPATH') or exit('No direct script access allowed');
/**
 * Otomoto component
 */
class OtomotoComponentComponent extends CI_Controller
{
    /**
     * Default configuration.
     *
     * @var array
     */
    protected $_defaultConfig = [];

    public $url = [
        'sandbox' => 'https://sbotomotopl.playground.lisbontechhub.com/api/open',
        'production' => 'https://ssl.otomoto.pl/api/open'
    ];

    //    API ( 20db09f3e99a6fba22abdf2c756fe70b id klucza: 329 ).
    protected $api = '329:20db09f3e99a6fba22abdf2c756fe70b';
    public $account = [];

    public $token;

    public $refresh_token;

    public $sandbox;

    public $ch;

    public $result;

    public $error;

    public $status;

    public function login($login, $password, $sandbox)
    {
        $this->result = '';
        $this->sandbox = $sandbox;
        $this->account = [
            'login' => $login,
            'password' => $password
        ];

        $this->sandbox = 0;

        $this->initPost('/oauth/token');
        curl_setopt(
            $this->ch,
            CURLOPT_POSTFIELDS,
            "grant_type=password&username={$login}&password={$password}"
        );
        curl_setopt($this->ch, CURLOPT_USERPWD, $this->api);
        $this->send();

        $this->result = json_decode($this->result);

        if (isset($this->result->error)) {
            $this->error = $this->result->error_human_title;
        } else {
            $this->token = $this->result->access_token;
            $this->refresh_token = $this->result->refresh_token;
        }

        return $this;
    }

    public function refreshLogin()
    {
        if ($this->token && $this->refresh_token) {
            $this->initPost('/oauth/token');
            curl_setopt(
                $this->ch,
                CURLOPT_POSTFIELDS,
                "grant_type=refresh_token&refresh_token={$this->refresh_token}"
            );
            curl_setopt($this->ch, CURLOPT_USERPWD, $this->api);
            $this->send();
        }
    }

    public function getAllUserAdvert($page = 1)
    {
        $url = "/account/adverts?limit=10&page={$page}";
        $this->error = '';
        $this->result = '';

        $this->initGet($url);

        if ($this->error) {
            $this->error = 'Blad podczas pobierania ogłoszeń';
        } else {
            $this->result = json_decode($this->result->getBody());
        }


        return $this;
    }

    public function categories($id = null)
    {
        $url = '/categories';
        if ($id > 0) {
            $url = $url . '/' . $id;
        }

        // // $this->initGet($url);
        // // $this->getJson($url);
        // $this->getJsonWithoutAuth($url);

        // // if ($this->result->getStatusCode() != 200) {
        // if ($this->error) {
        //     $this->error = 'Blad podczas pobierania kategorii';
        // } else {
        //     $this->result = json_decode($this->result->getBody());
        // }

        $this->result = json_decode(file_get_contents('https://ssl.otomoto.pl/api/open' . $url));
        return $this;
    }

    public function getVersion($category_id, $brand_code, $model_code)
    {
        $url = "/categories/$category_id/models/$brand_code/versions/$model_code";

        $this->initGet($url);

        try {


            if (
                empty($category_id) ||
                empty($brand_code) ||
                empty($model_code)
            ) {
                $this->error = 'Niewystarczające dane';
                $this->result = json_decode(array('error' => '0'));
            } elseif (isset($this->result) && (!$this->result || $this->result->getStatusCode() != 200)) {
                $this->error = 'Blad podczas pobierania kategorii';
            } else {
                $this->result = json_decode($this->result->getBody());
            }
        } catch (\Exception $e) {
            $this->error = 'Blad podczas pobierania kategorii';
        }

        return $this;
    }

    public function regions($id = null)
    {
        $url = '/regions';
        if ($id > 0) {
            $url = $url . '/' . $id;
        }

        $this->initGet($url);

        if ($this->result->getStatusCode() != 200) {
            $this->error = 'Blad podczas pobierania kategorii';
        } else {
            $this->result = json_decode($this->result->getBody());
        }

        return $this;
    }

    private function initPost($posturl)
    {
        //echo 'initPost'; exit;
        $url_pre = null;

        if ($this->sandbox) {
            $url_pre = $this->url['sandbox'];
        } else {
            $url_pre = $this->url['production'];
        }

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $this->ch = curl_init();

        curl_setopt($this->ch, CURLOPT_URL, "{$url_pre}{$posturl}");
        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($this->ch, CURLOPT_POST, 1);

        $headers = array();
        $headers[] = "Content-Type: application/x-www-form-urlencoded";
        curl_setopt($this->ch, CURLOPT_HTTPHEADER, $headers);

        if ($this->token) {
            curl_setopt(
                $this->ch,
                CURLOPT_POSTFIELDS,
                "Content-Type: application/json\nAuthorization: Bearer {$this->token}"
            );
        }
    }

    private function initGet($posturl)
    {
        echo 'initGet';
        exit;
        $url_pre = null;

        if ($this->sandbox) {
            $url_pre = $this->url['sandbox'];
        } else {
            $url_pre = $this->url['production'];
        }

        try {
            $client = new \GuzzleHttp\Client([
                'headers' => [
                    'Cache-Control' => 'no-cache',
                    'Authorization' => "Bearer {$this->token}",
                    'Content-Type' => 'application/json'
                ]
            ]);

            $this->result = $client->request('GET', "{$url_pre}{$posturl}");
        } catch (Exception $e) {
            $this->error = 'Blad podczas no.628 ' . $posturl;
        } catch (ClientException $e) {
            $this->error = 'Blad podczas no.628 ' . $posturl;
        }

        return $this;
    }

    public function postJson($array, $posturl)
    {
        //echo 'postJson'; exit;
        $this->result = null;
        $this->error = null;

        $url_pre = null;
        if ($this->sandbox) {
            $url_pre = $this->url['sandbox'];
        } else {
            $url_pre = $this->url['production'];
        }

        $client = new \GuzzleHttp\Client([
            'headers' => [
                'Authorization' => 'Bearer ' . $this->token,
                'Content-Type' => 'application/json'
            ]
        ]);
        //var_dump(json_decode($array); exit;
        $array[1] = 'https://ignaszak.pl/files/_testotomoto/732/488/otomoto/2/P1050986.jpeg';
        try {
            $this->result = $client->request('POST', "{$url_pre}{$posturl}", [
                'json' => $array,
                'version' => 1.1
            ]);

            $this->result = $this->result->getBody()->getContents();
        } catch (\Exception $exception) {
            // $this->error = [
            //     'msg' => 'Wystapil blad podczas: ' . $posturl,
            //     'msg2' => $exception
            //         ->getResponse()
            //         ->getBody()
            //         ->getContents(),
            //     'exception' => $exception->getResponse()->getBody(true),
            //     'result' => json_decode($this->result),
            //     'response' => $exception->getResponse()
            // ];
            $this->error = [
                'msg2' => $exception
                    ->getResponse()
                    ->getBody()
                    ->getContents(),
                'files' => $array
            ];
            //var_dump($exception);
            echo '<hr>';
            var_dump($exception->getResponse()->getBody()->getContents());
            echo '<hr>';
            var_dump($exception->getResponse()->getBody(true));
            echo '<hr>';
            var_dump($this->error);
            echo '<hr>';
            var_dump(json_decode($this->result));
            echo '<hr>';
            var_dump($exception->getResponse());
            exit;
        }

        return $this;
    }

    public function putJson($array, $posturl)
    {
        $this->result = null;
        $this->error = null;
        $url_pre = null;

        if ($this->sandbox) {
            $url_pre = $this->url['sandbox'];
        } else {
            $url_pre = $this->url['production'];
        }

        $client = new \GuzzleHttp\Client([
            'headers' => [
                'Authorization' => 'Bearer ' . $this->token,
                'Content-Type' => 'application/json'
            ]
        ]);

        try {
            $this->result = $client->request('PUT', "{$url_pre}{$posturl}", [
                'json' => $array,
                'version' => 1.1
            ]);

            $this->result = $this->result->getBody()->getContents();
        } catch (\Exception $exception) {
            $this->error = [
                'msg' => 'Wystapil blad podczas: ' . $posturl,
                'msg2' => $exception
                    ->getResponse()
                    ->getBody()
                    ->getContents(),
                'exception' => $exception->getResponse()->getBody(true),
                'result' => json_decode($this->result),
                'response' => $exception->getResponse()
            ];
            // echo json_encode($this->error);
            echo $exception;
            exit;
        }

        return $this;
    }

    public function getJson($posturl)
    {
        $this->result = null;
        $this->error = null;
        $this->status = 0;
        $url_pre = null;

        if ($this->sandbox) {
            $url_pre = $this->url['sandbox'];
        } else {
            $url_pre = $this->url['production'];
        }

        try {


            // $basicauth = new \GuzzleHttp\Client(['base_uri' => $url_pre]);
            $basicauth = new \GuzzleHttp\Client();
            $credentials = base64_encode($this->api);

            $this->result = $basicauth->request(
                'GET',
                "{$url_pre}{$posturl}",
                [
                    'allow_redirects' => true,
                    'headers' => [
                        // 'Authorization' => "Basic {$credentials},Bearer {$this->token}"
                        'Authorization' => "Bearer {$this->token}"
                    ]
                ]
            );




            $this->status = $this->result->getStatusCode();
            $jsonObj = json_decode($this->result->getBody()->getContents());

            if ($jsonObj === null && json_last_error() !== JSON_ERROR_NONE) {
                $this->result = $this->result->getBody()->getContents();
            } else {
                $this->result = $jsonObj;
            }
        } catch (Exception $e) {
            $this->error = 'Blad podczas no.628 ' . $posturl;
        } catch (ClientException $e) {
            $this->status = $e->getCode();
            $this->error = 'Blad podczas no.628 ' . $posturl;
        } catch (Throwable $e) {
            $this->error = 'Blad podczas no.629 ' . $posturl;
        }

        return $this;
    }

    public function getJsonWithoutAuth($posturl)
    {
        $this->result = null;
        $this->error = null;
        $this->status = 0;
        $url_pre = null;

        if ($this->sandbox) {
            $url_pre = $this->url['sandbox'];
        } else {
            $url_pre = $this->url['production'];
        }

        try {


            // $basicauth = new \GuzzleHttp\Client(['base_uri' => $url_pre]);
            $basicauth = new \GuzzleHttp\Client();
            $credentials = base64_encode($this->api);

            $this->result = $basicauth->request(
                'GET',
                "{$url_pre}{$posturl}"
                // [
                //   'allow_redirects' => true,
                //     'headers' => [
                //         // 'Authorization' => "Basic {$credentials},Bearer {$this->token}"
                //         'Authorization' => "Bearer {$this->token}"
                //     ]
                // ]
            );




            $this->status = $this->result->getStatusCode();
            $jsonObj = json_decode($this->result->getBody()->getContents());

            if ($jsonObj === null && json_last_error() !== JSON_ERROR_NONE) {
                $this->result = $this->result->getBody()->getContents();
            } else {
                $this->result = $jsonObj;
            }
        } catch (Exception $e) {
            $this->error = 'Blad podczas no.628 ' . $posturl;
        } catch (ClientException $e) {
            $this->status = $e->getCode();
            $this->error = 'Blad podczas no.628 ' . $posturl;
        } catch (Throwable $e) {
            $this->error = 'Blad podczas no.629 ' . $posturl;
        }

        return $this;
    }

    private function send()
    {
        $this->result = curl_exec($this->ch);

        if (curl_errno($this->ch)) {
            $this->error = curl_error($this->ch);
            return false;
        }

        curl_close($this->ch);

        return true;
    }
}
